package com.javaoop.movie_booking_app.model;

import jakarta.persistence.*;

import java.util.HashSet;
import java.util.Set;

/**
 * Represents a ticket booking made by a member for a particular showtime.
 * <p>
 * Each Booking entity stores the reference to the Member who booked,
 * the specific Showtime, the booking status, ticket type, and the
 * set of Seats associated with the booking.
 * </p>
 * <p>
 * This entity uses a many-to-many relationship with Seat via the
 * intermediate join table "Booking_Seats".
 * </p>
 */
@Entity
@Table(name = "Bookings", indexes = {
        @Index(name = "idx_member_id", columnList = "member_id"),
        @Index(name = "idx_showtime_id", columnList = "showtime_id")
})
public class Booking {
    /**
     * Unique identifier for the booking.
     * This is the primary key and is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "booking_id", nullable = false, updatable = false)
    private Long bookingId;

    /**
     * The member who made this booking.
     * Many bookings can be made by one member.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "member_id", nullable = false)
    private Member member;

    /**
     * The showtime associated with this booking.
     * Many bookings can relate to one showtime.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "showtime_id", nullable = false)
    private Showtime showtime;

    /*
    // Uncomment if you want to store the booking timestamp.
    @CreationTimestamp
    @Column(name = "booking_time", nullable = false, updatable = false)
    private LocalDateTime bookingTime;
    */

    /**
     * The status of this booking.
     * Examples: CONFIRMED, CANCELLED, PENDING.
     * Stored as a string in the database.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false, length = 20)
    private BookingStatus status = BookingStatus.PENDING;

    /**
     * The type of ticket for this booking.
     * Examples: ADULT, CHILD, SENIOR.
     * Stored as a string in the database.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false, length = 20)
    private TicketType type;

    /*
    // Uncomment if you want to store total price for this booking.
    @Column(name = "total_price", precision = 10, scale = 2)
    private BigDecimal totalPrice;
    */

    /**
     * The set of seats reserved in this booking.
     * Many-to-many relationship via the join table "Booking_Seats".
     */
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
            name = "Booking_Seats",
            joinColumns = @JoinColumn(name = "booking_id"),
            inverseJoinColumns = @JoinColumn(name = "seat_id")
    )
    private Set<Seat> seats = new HashSet<>();

    /**
     * Default no-argument constructor for JPA.
     */
    public Booking() {
    }

    /**
     * Constructs a Booking with the specified member, showtime, and ticket type.
     *
     * @param member   the Member who makes the booking
     * @param showtime the Showtime for which the booking is made
     * @param type     the type of ticket booked
     */
    public Booking(Member member, Showtime showtime, TicketType type) {
        this.member = member;
        this.showtime = showtime;
        this.type = type;
        // bookingTime would be set automatically if @CreationTimestamp is used
        // status defaults to PENDING
    }

    /**
     * Gets the booking ID.
     *
     * @return the booking's unique identifier
     */
    public Long getBookingId() {
        return bookingId;
    }

    /**
     * Sets the booking ID.
     * Usually used by JPA internally.
     *
     * @param bookingId the booking ID to set
     */
    public void setBookingId(Long bookingId) {
        this.bookingId = bookingId;
    }

    /**
     * Gets the member who made the booking.
     *
     * @return the Member entity
     */
    public Member getMember() {
        return member;
    }

    /**
     * Sets the member who made the booking.
     *
     * @param member the Member entity to set
     */
    public void setMember(Member member) {
        this.member = member;
    }

    /**
     * Gets the showtime associated with this booking.
     *
     * @return the Showtime entity
     */
    public Showtime getShowtime() {
        return showtime;
    }

    /**
     * Sets the showtime associated with this booking.
     *
     * @param showtime the Showtime entity to set
     */
    public void setShowtime(Showtime showtime) {
        this.showtime = showtime;
    }

    /*
    public LocalDateTime getBookingTime() {
        return bookingTime;
    }

    public void setBookingTime(LocalDateTime bookingTime) {
        this.bookingTime = bookingTime;
    }
    */

    /**
     * Gets the booking status.
     *
     * @return the current BookingStatus
     */
    public BookingStatus getStatus() {
        return status;
    }

    /**
     * Sets the booking status.
     *
     * @param status the BookingStatus to set
     */
    public void setStatus(BookingStatus status) {
        this.status = status;
    }

    /*
    public BigDecimal getTotalPrice() {
        return totalPrice;
    }

    public void setTotalPrice(BigDecimal totalPrice) {
        this.totalPrice = totalPrice;
    }
    */

    /**
     * Gets the set of seats reserved in this booking.
     *
     * @return the Set of Seat entities
     */
    public Set<Seat> getSeats() {
        return seats;
    }

    /**
     * Sets the seats reserved for this booking.
     *
     * @param seats the Set of Seat entities to associate
     */
    public void setSeats(Set<Seat> seats) {
        this.seats = seats;
    }

    /**
     * Gets the ticket type for this booking.
     *
     * @return the TicketType enum value
     */
    public TicketType getType() {
        return type;
    }

    /**
     * Sets the ticket type for this booking.
     *
     * @param type the TicketType to set
     */
    public void setType(TicketType type) {
        this.type = type;
    }

    /**
     * Returns a string representation of this Booking, including key fields.
     *
     * @return a string summarizing the booking details
     */
    @Override
    public String toString() {
        return "Booking{" +
                "bookingId=" + bookingId +
                ", memberId=" + (member != null ? member.getMemberId() : "null") +
                ", showtimeId=" + (showtime != null ? showtime.getShowtimeId() : "null") +
                // (bookingTime != null ? ", bookingTime=" + bookingTime : "") + // if uncommented
                ", status=" + status +
                // (totalPrice != null ? ", totalPrice=" + totalPrice : "") + // if uncommented
                '}';
    }
}
